% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edgeAngles.R
\name{edgeAngles}
\alias{edgeAngles}
\title{Compute edge angles (beta - please inspect results and report bugs!)}
\usage{
edgeAngles(mesh, c.lms, m.d)
}
\arguments{
\item{mesh}{A clean mesh3d object}

\item{c.lms}{An Nx3 matrix-like object containing ordered 3D coordinates of
points located on the mesh surface.}

\item{m.d}{Measuring distance from the edge where the angle should be
computed, given as a radius of sphere extending from each landmark of
interest.}
}
\description{
Computes edge angles along a path defined by ordered surface
coordinates, at a given distance (m.d) perpendicular to the path. This
function works by first computing planes perpendicular to the edge using the
\link{curve.pp} function. Note that said function returns planes at n-2
locations, since planes cannot be computed for the endpoints. Once these
planes have been obtained, mesh edges that intersect
the planes are identified with the \link{edgesOnPlane} function. To identify
the location where the mesh thickness should be measured, the intersection
points of these mesh edges with a sphere of radius m.d is computed using the
\link{e2sIntersect} function. The intersections with the greatest distances
between them (see note) are then used to measure mesh thickness, and angles
are then computed using simple trigonometry.
}
\note{
\itemize{
\item This function may not work correctly if multiple sections of a mesh
are cut by a plane (i.e. if segments from a different edge are included due
to edge curvature).
\item Note that no checks are done to ensure measurements do not extend
beyond central ridges, for example. Such checks would be relatively easy
to implement (e.g. calculating signed distance of mesh surface pts to the
line between the LOI and the target point where thickness will be measured)
\item Note that there will be some inaccuracies in angle calculations: a)
the algorithm for finding local planes, which assumes edge landmarks define
a circle, can be problematic at times, b) the sphere/edge intersection
points will often not be on the defined plane
\item Note that the input points do not have to be equidistant, but
unevenly spaced points can cause problems. If using non-equidistant points
make sure you understand how the algorithm works.
}
}
\section{TODO}{
 CONSIDER projecting along the normal of the midpoint to a
distance of actually xx mesh units?
}

\examples{
data(demoFlake2)
e.curve = sPathConnect(demoFlake2$lms[1:4, ], demoFlake2$mesh, path.choice="ridges")
meshVertices<-data.frame(t(demoFlake2$mesh$vb))
path.res <- pathResample(as.matrix(meshVertices[e.curve,1:3]), 30,
                         method="npts")
res = edgeAngles(demoFlake2$mesh, path.res, m.d=3)

}
\seealso{
\link{edge_angles_vis3d} and \link{edge_angles_vis2d} to visualize the measurement
process in 3D and 2D respectively.
}
\author{
Cornel M. Pop
}
